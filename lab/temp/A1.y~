/**
*
*
*
*
**/

//LOGS

//TODO: 11 Shift/reduce comflicts to be resolved



%{
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <assert.h>
#include <stdio.h>

typedef struct Token {
	// int tokenId;
	char* val;
	struct Token* next;
} Token;

Token* insert(Token* head, char s[]) {
	Token* t = (Token*) malloc(sizeof(Token));
	t->val = (char*) malloc(sizeof(char)*(strlen(s)+1));
	t->val[0] = '\0';
	strcat(t->val, s);
	t->next = NULL;

	if(head == NULL) return t;
	else {
		Token* t1 = head;
		while(t1->next != NULL) {
			t1 = t1->next;
		}
		t1->next = t;
		return head;
	}
}

void printall(Token* head) {
	Token* t = head;
	while(t!=NULL) {
		printf("%s ", t->val);
		t  = t->next;
	}
}

Token* cat(Token* t1, Token* t2) {
	if(t1 == NULL) return t2;
	if(t2 == NULL) return t1;

	Token* t = t1;
	while(t->next != NULL) t = t->next;

	t->next = t2;
	return t1;
}

typedef struct Macro {
	char* name;
	int nArgs;
	Token* tokenStream;
	struct Macro* next;
} Macro;

Macro* macros = NULL;

void registerMacro(char* nameT, /*int nArgsT,*/ Token* argList, Token* tokenStreamT) {
	//TODO: validate argList, to eliminate/report duplication

	Macro* m = (Macro*) malloc(sizeof(Macro));
	m->name = nameT;
	// m->nArgs = nArgsT;
	m->tokenStream = tokenStreamT;

	// char* s = (char*) malloc(3*sizeof(char));
	// strcat(s, "$");

	Token* t = m->tokenStream;
	while(t != NULL) {
		Token* a = argList;
		int argpos = 1;
		while(a != NULL) {
			if(strcmp(a->val,t->val)==0) {
				//match!
				free(t->val);
				t->val = (char*) malloc(3*sizeof(char));
				t->val[0] = '$';
				t->val[1] = '0'+argpos;
				t->val[2] = '\0';
				break;
			}
			//no match, check next
			a = a->next;
			argpos++;
		}
		t = t->next;
	}

	//tokenstream of the macro is modified and now contains appropriate placeholders
	//add it to overall macro collection

	if(macros == NULL) {
		macros = m;
		macros->next = NULL;
		return;
	}

	//else, add macro m to the second position
	m->next = macros->next;
	macros->next = m;
}

%}

%union {
	int	int_val;
	char* name;
	struct Token* genList;
}

/* declare tokens */
%token IMPORT_LINE CLASS PUBLIC PRIVATE PROTECTED STATIC VOID MAIN RETURN SYS_OUT_PRINTLN EXTENDS INT_ARRAY INT BOOLEAN STRING TRUE FALSE THIS NEW DELETE IF THEN ELSE WHILE FOR NOT EQTO LEFT_BRAC RIGHT_BRAC LEFT_CURL_BRAC RIGHT_CURL_BRAC LEFT_SQR_BRAC RIGHT_SQR_BRAC LEFT_ANG_BRAC RIGHT_ANG_BRAC DEFEXPR0 DEFEXPR1 DEFEXPR2 DEFEXPR DEFSTMT0 DEFSTMT1 DEFSTMT2 DEFSTMT SEMICOLON DOT
%token<name> NUMBER ID
%token COMMA
%token LENGTH
%token AND OR LTE GTE NOTEQ ADD SUB MUL DIV DOT
%nonassoc NO_PE

// %type<name> goal expr term factor NUMBER
%type<name> Identifier Type Number
%type<genList> MainClass 
%type<genList> TypeIdStar
%type<genList> goal
%type<genList> TypeDec
%type<genList> TypeDecStar
%type<genList> MacroDefStar
%type<genList> MethodStar
%type<genList> Expr
%type<genList> ExprList
%type<genList> ExprListT
%type<genList> ArgList
%type<genList> ArgListT
%type<genList> PE
%type<genList> PES
%type<genList> MethodDec
%type<genList> Stmt
%type<genList> StmtStar
%type<genList> MacroDef
%type<genList> MacroDefExpr
%type<genList> MacroDefStmt
%type<genList> CommaIdStar

%%

goal : MacroDefStar MainClass TypeDecStar
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = cat($$, $2);
	$$ = cat($$, $3);
	printall($$);
};
MainClass : CLASS Identifier LEFT_CURL_BRAC TypeIdStar PUBLIC STATIC VOID MAIN LEFT_BRAC STRING LEFT_SQR_BRAC RIGHT_SQR_BRAC Identifier RIGHT_BRAC LEFT_CURL_BRAC SYS_OUT_PRINTLN LEFT_BRAC Expr RIGHT_BRAC SEMICOLON RIGHT_CURL_BRAC RIGHT_CURL_BRAC
{
	$$ = NULL;
	$$ = insert($$, "class");
	$$ = insert($$, $2);
	$$ = insert($$, "{");
	$$ = cat($$, $4);
	$$ = insert($$, "public");
	$$ = insert($$, "static");
	$$ = insert($$, "void"); 
	$$ = insert($$, "main");
	$$ = insert($$, "(");
	$$ = insert($$, "String");
	$$ = insert($$, "[");
	$$ = insert($$, "]");
	$$ = insert($$, $13);
	$$ = insert($$, ")");
	$$ = insert($$, "{");
	$$ = insert($$, "System.out.println");
	$$ = insert($$, "(");
	$$ = cat($$, $18);
	$$ = insert($$, ")");
	$$ = insert($$, ";");
	$$ = insert($$, "}");
	$$ = insert($$, "}");	
};
TypeDecStar : 
{
	$$ = NULL;
}
  | TypeDec TypeDecStar
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = cat($$, $2);
};
TypeDec : CLASS Identifier LEFT_CURL_BRAC TypeIdStar MethodStar RIGHT_CURL_BRAC
{
	$$ = NULL;
	$$ = insert($$, "class");
	$$ = insert($$, $2);
	$$ = insert($$, "{");
	$$ = cat($$, $4);
	$$ = cat($$, $5);
	$$ = insert($$, "}");
}
  | CLASS Identifier EXTENDS Identifier LEFT_CURL_BRAC TypeIdStar MethodStar RIGHT_CURL_BRAC
{
	$$ = NULL;
	$$ = insert($$, "class");
	$$ = insert($$, $2);
	$$ = insert($$, "extends");
	$$ = insert($$, $4);
	$$ = insert($$, "{");
	$$ = cat($$, $6);
	$$ = cat($$, $7);
	$$ = insert($$, "}");
}
MethodStar : 
{
	$$ = NULL;
}
  | MethodDec MethodStar
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = cat($$, $2);
};
MethodDec : PUBLIC Type Identifier LEFT_BRAC ArgList RIGHT_BRAC LEFT_CURL_BRAC TypeIdStar StmtStar RETURN Expr SEMICOLON RIGHT_CURL_BRAC
{
	$$ = NULL;
	$$ = insert($$, "public");
	$$ = insert($$, $2);
	$$ = insert($$, $3);
	$$ = insert($$, "(");
	$$ = cat($$, $5);
	$$ = insert($$, ")");
	$$ = insert($$, "{");
	$$ = cat($$, $8);
	$$ = cat($$, $9);
	$$ = insert($$, "return");
	$$ = cat($$, $11);
	$$ = insert($$, "}");
};
//   | PUBLIC VOID Identifier LEFT_BRAC ArgList RIGHT_BRAC LEFT_CURL_BRAC TypeIdStar StmtStar RIGHT_CURL_BRAC
// {
// 	$$ = NULL;
// 	$$ = insert($$, "public");
// 	$$ = insert($$, "void");
// 	$$ = insert($$, $3);
// 	$$ = insert($$, "(");
//	$$ = cat($$, $5);
// 	$$ = insert($$, ")");
// 	$$ = insert($$, "{");
//	$$ = cat($$, $8);
// 	$$ = cat($$, $9);
// 	$$ = insert($$, "}");
// };
TypeIdStar : 
{
	$$ = NULL;
}
  | TypeIdStar Type Identifier SEMICOLON
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, $2);
	$$ = insert($$, $3);
	$$ = insert($$, ";");
};
Type : INT
{
	int len = strlen("int");
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,"int");
}
  |  INT_ARRAY
{
	int len = strlen("int[]");
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,"int[]");
}
  |  INT LEFT_SQR_BRAC RIGHT_SQR_BRAC
{
	int len = strlen("int[]");
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,"int[]");
}
  |  BOOLEAN
{
	int len = strlen("boolean");
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,"boolean");
}
  | Identifier
{
	int len = strlen($1);
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,$1);
};
ArgList : 
{
	$$ = NULL;
}
  | ArgListT
{
	$$ = NULL;
	$$ = cat($$, $1);
};
ArgListT : Type Identifier
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, $2);
}
  | Type Identifier COMMA ArgListT
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, $2);
	$$ = insert($$, ",");
	$$ = cat($$, $4);
};
StmtStar :
{
	$$ = NULL;
}
  | Stmt StmtStar
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = cat($$, $2);
};
Stmt : LEFT_CURL_BRAC StmtStar RIGHT_CURL_BRAC
{
	$$ = NULL;
	$$ = insert($$, "{");
	$$ = cat($$, $2);
	$$ = insert($$, "}");
}
  | SYS_OUT_PRINTLN LEFT_BRAC Expr RIGHT_BRAC SEMICOLON
{
	$$ = NULL;
	$$ = insert($$, "System.out.println");
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
	$$ = insert($$, ";");
}
  | Identifier EQTO Expr SEMICOLON
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, "=");
	$$ = cat($$, $3);
	$$ = insert($$, ";");
}
  | Identifier LEFT_SQR_BRAC Expr RIGHT_SQR_BRAC EQTO Expr SEMICOLON
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, "[");
	$$ = cat($$, $3);
	$$ = insert($$, "]");
	$$ = insert($$, "=");
	$$ = cat($$, $6);
	$$ = insert($$, ";");
}
  | IF LEFT_BRAC Expr RIGHT_BRAC Stmt
{
	$$ = NULL;
	$$ = insert($$, "if");
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
	$$ = cat($$, $5);
}
  | IF LEFT_BRAC Expr RIGHT_BRAC Stmt ELSE Stmt
{
	$$ = NULL;
	$$ = insert($$, "if");
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
	$$ = cat($$, $5);
	$$ = insert($$, "else");
	$$ = cat($$, $7);
}
  | WHILE LEFT_BRAC Expr RIGHT_BRAC Stmt
{
	$$ = NULL;
	$$ = insert($$, "while");
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
	$$ = cat($$, $5);
}
  | Identifier LEFT_BRAC ExprList RIGHT_BRAC SEMICOLON
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
	$$ = insert($$, ";");
};
ExprList : 
{
	$$ = NULL;
}
  | ExprListT
{
	$$ = NULL;
	$$ = cat($$, $1);
};
ExprListT : Expr
{
	$$ = NULL;
	$$ = cat($$, $1);
}
  | Expr COMMA ExprListT
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, ",");
	$$ = cat($$, $3);
};
Expr : PE AND PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "and");
	$$ = cat($$, $3);
}
  | PE OR PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "||");
	$$ = cat($$, $3);
}
  | PE NOTEQ PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "!=");
	$$ = cat($$, $3);
}
  | PE LTE PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "<=");
	$$ = cat($$, $3);
}
  | PE ADD PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "+");
	$$ = cat($$, $3);
}
  | PE SUB PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "-");
	$$ = cat($$, $3);
}
  | PE MUL PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "*");
	$$ = cat($$, $3);
}
  | PE DIV PE
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "/");
	$$ = cat($$, $3);
}
  | PE LEFT_SQR_BRAC PE RIGHT_SQR_BRAC
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, "[");
	$$ = cat($$, $3);
	$$ = insert($$, "]");
}
  | PE DOT LENGTH
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, ".");
	$$ = insert($$, "length");
}
  | PE %prec NO_PE
{
	$$ = NULL;
	$$ = cat($$, $1);
}
  | PE DOT Identifier LEFT_BRAC ExprList RIGHT_BRAC
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = insert($$, ".");
	$$ = insert($$, $3);
	$$ = insert($$, "(");
	$$ = cat($$, $5);
	$$ = insert($$, ")");
}
  | Identifier LEFT_BRAC ExprList RIGHT_BRAC
{
	$$ = NULL;
	$$ = insert($$, $1);
	$$ = insert($$, "(");
	$$ = cat($$, $3);
	$$ = insert($$, ")");
};
PE : PES
{
	$$ = $1;
};
PES : Number
{
	$$ = NULL;
	$$ = insert($$, $1);
}
  | TRUE
{
	$$ = NULL;
	$$ = insert($$, "true");
}
  | FALSE
{
	$$ = NULL;
	$$ = insert($$, "false");
}
  | Identifier
{
	$$ = NULL;
	$$ = insert($$, $1);
}
  | THIS
{
	$$ = NULL;
	$$ = insert($$, "this");
}
  | NEW INT LEFT_SQR_BRAC Expr RIGHT_SQR_BRAC
{
	$$ = NULL;
	$$ = insert($$, "new");
	$$ = insert($$, "int");
	$$ = insert($$, "[");
	$$ = cat($$, $4);
	$$ = insert($$, "]");
}
  | NEW Identifier LEFT_BRAC RIGHT_BRAC
{
	$$ = NULL;
	$$ = insert($$, "new");
	$$ = insert($$, $2);
	$$ = insert($$, "(");
	$$ = insert($$, ")");
}
  | NOT Expr
{
	$$ = NULL;
	$$ = insert($$, "!");
	$$ = cat($$, $2);
}
  | LEFT_BRAC Expr RIGHT_BRAC
{
	$$ = NULL;
	$$ = insert($$, "(");
	$$ = cat($$, $2);
	$$ = insert($$, ")");
};
MacroDefStar : 
{
	$$ = NULL;
}
  | MacroDef MacroDefStar
{
	$$ = NULL;
	$$ = cat($$, $1);
	$$ = cat($$, $2);
};
MacroDef : MacroDefExpr
{
	$$ = $1;
}
  | MacroDefStmt
{
	$$ = $1;
};
MacroDefStmt : DEFSTMT Identifier LEFT_BRAC Identifier COMMA Identifier COMMA Identifier CommaIdStar RIGHT_BRAC LEFT_CURL_BRAC StmtStar RIGHT_CURL_BRAC
{
	$$ = NULL;
}
  | DEFSTMT0 Identifier LEFT_BRAC RIGHT_BRAC LEFT_CURL_BRAC StmtStar RIGHT_CURL_BRAC
{
	$$ = NULL;
}
  | DEFSTMT1 Identifier LEFT_BRAC Identifier RIGHT_BRAC LEFT_CURL_BRAC StmtStar RIGHT_CURL_BRAC
{
	$$ = NULL;
}
  | DEFSTMT1 Identifier LEFT_BRAC Identifier COMMA Identifier RIGHT_BRAC LEFT_CURL_BRAC StmtStar RIGHT_CURL_BRAC
{
	$$ = NULL;
};
MacroDefExpr : DEFEXPR Identifier LEFT_BRAC Identifier COMMA Identifier COMMA Identifier CommaIdStar RIGHT_BRAC LEFT_BRAC Expr RIGHT_BRAC
{
	$$ = NULL;
}
  | DEFEXPR0 Identifier LEFT_BRAC RIGHT_BRAC LEFT_BRAC Expr RIGHT_BRAC
{
	$$ = NULL;
}
  | DEFEXPR1 Identifier LEFT_BRAC Identifier RIGHT_BRAC LEFT_BRAC Expr RIGHT_BRAC
{
	$$ = NULL;
}
  | DEFEXPR2 Identifier LEFT_BRAC Identifier COMMA Identifier RIGHT_BRAC LEFT_BRAC Expr RIGHT_BRAC
{
	$$ = NULL;
};
CommaIdStar : 
{
	$$ = NULL;
}
  | COMMA Identifier CommaIdStar
{
	$$ = NULL;
} 
Number : NUMBER
{
	int len = strlen($1);
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,$1);
};
Identifier : ID
{
	int len = strlen($1);
	$$ = (char*) malloc((len + 1) * sizeof(char));
	$$[0] = '\0';
	strcat($$,$1);
};



// goal :
// {
	
// }
//   | EOL
// {
	
// }
//   | EOL goal
// {
	
// }
//   | expr EOL goal
// {
	
// };

// expr : expr ADD term 
// {	
// 	printf(" + ");
// } 
// 	| expr SUB term 
// {
// 	printf(" - ");
// }
// 	| term 
// {

// };

// term : term MUL factor
// {	
// 	printf(" * ");
// }
// 	| term DIV factor 
// {
// 	printf(" / ");
// }
// 	| factor
// {
	
// };

// factor : NUMBER 
// {
// 	int len = strlen($1);
// 	$$ = (char*) malloc((len + 1) * sizeof(char));
// 	$$[0] = '\0';
// 	strcat($$,$1);
// 	printf("%s ", $1);
// };

%%
main(int argc, char **argv)
{
  yyparse();
}

yyerror(char *s)
{
  fprintf(stderr, "error: %s\n", s);
}